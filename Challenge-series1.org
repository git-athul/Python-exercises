* Challenge series-1 [100%]
1. [X] maximum.py:
   Write a program to find the largest number in a list of numbers

2. [X] minimum.py: 
   Write a program to find the smallest number in a list of numbers

3. [X] min_max.py:
   Write a program to find the largest and smallest numbers in a list of numbers

4. [X] mean.py:
   Write a function mean which will take a list of numbers of and find the mean of the list

5. [X] median.py:
   Write a function median which will take a list of numbers of and find the median of the list

6. [X] mode.py:
   Write a function mode which will take a list of numbers of and find the mode of the list

7. [X] table.py:
   Write a function called tables which takes two arguments m and
     n. It should print the m times tables from 1 to n.
     tables(3, 5) should print:
     3 x 1 =  3
     3 x 2 =  6
     3 x 3 =  9
     3 x 4 = 12
     3 x 5 = 15

8. [X] table2.py:
   Write a function called tables2 which which takes one argument n
     and will print the tables from 1x1 to nxn in a square format
     e.g. tables2(5) will print:
     1   2   3   4   5
     2   4   6   8  10
     3   6   9  12  15
     4   8  12  16  20
     5  10  15  20  25

     table2bonus.py:
     Bonus if you can print it like this:

     1 |  2   3   4   5
     --+---------------
     2 |  4   6   8  10
     3 |  6   9  12  15
     4 |  8  12  16  20
     5 | 10  15  20  25

9. [X] panagram.py, panagram-set.py:
   A sentence that contains all letters of the alphabet is a
     panagram. e.g. "the quick brown fox jumps over the lazy dog",
     "sphinx of black quartz, judge my vow!"  Write a function called
     panagram which will take a string s as input and return True if s
     is a pangram and False if not

10. [X] frequency.py:
    Write a function called freq which will take a string s as input
      and then return a dictionary d which contains the letters of s as
      keys and the number of times they occur as values. e.g. 
      freq("abbbcc") will return {'a' : 1, 'b' : 3, 'c' : 2}

11. [X] breakdown.py
    Write a function called breakdown which takes a number n
      representing an amount of money as input and returns a breakdown
      of the amount in various denominations. e.g.:
      breakdown(2722) will print
      1000 x 2 = 2000 (722 left)
       500 x 1 =  500 (222 left)
       100 x 2 =  200 ( 22 left)
	20 x 1 =   20 (  2 left)
	 1 x 2 =    2 (  0 left)
      Use 1000, 500, 100, 50, 20, 10, 5, 1 as available denominations.
  
12. [X] evaluator.py: 
    Write a function called evaluate which implements and evaluates 
    postfix arithmetic expressions. e.g. :
    evaluate(23+) is equivalent to 2+3 = 5
    evaluate(23+5*) is equivalent to (2+3)*5 =25
